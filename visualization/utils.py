import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.colors import ListedColormap
import pandas as pd
import numpy as np

def md_pattern_like(df):
    """
    Replicates the md.pattern() behavior from R's mice package.
    Shows missing data patterns as 1 (observed) and 0 (missing),
    counts per pattern and per column.
    
    Parameters:
    -----------
    df : pandas.DataFrame
        Input DataFrame with potential missing values
        
    Returns:
    --------
    pandas.DataFrame
        DataFrame showing missing data patterns with counts
    """
    if not isinstance(df, pd.DataFrame):
        raise ValueError("Input must be a pandas DataFrame")

    if df.shape[1] < 2:
        raise ValueError("Data must have at least two columns")

    R = df.notna().astype(int)

    col_missing_counts = (R == 0).sum()
    sorted_cols = col_missing_counts.sort_values(ascending=True).index.tolist()
    R_sorted = R[sorted_cols]

    pattern_strings = R_sorted.astype(str).agg(''.join, axis=1)
    pattern_counts = pattern_strings.value_counts()

    pattern_matrix = pd.DataFrame(
        [list(map(int, list(p))) for p in pattern_counts.index],
        columns=sorted_cols
    )
    
    pattern_matrix["#miss_row"] = pattern_matrix.shape[1] - pattern_matrix.sum(axis=1)
    
    pattern_matrix = pattern_matrix.sort_values(by="#miss_row")
    pattern_counts = pattern_counts.iloc[pattern_matrix.index]


    
    pattern_matrix.index = pattern_counts.values
    pattern_matrix.index.name = "#rows"

    col_missing_sorted = col_missing_counts[sorted_cols]
    col_missing_row = col_missing_sorted.to_list()
    total_missing = sum(col_missing_row)
    col_missing_row.append(total_missing)

    summary_df = pattern_matrix.copy()
    summary_df.index = summary_df.index.map(str)
    summary_df.loc["#miss_col"] = col_missing_row

    return summary_df

def plot_missing_data_pattern(pattern_df, figsize=(8, 5), title="Missing Data Pattern"):
    """
    Plots the missing data pattern from a pattern dataframe.
    
    Parameters:
    -----------
    pattern_df : pandas.DataFrame
        DataFrame containing the missing data pattern, typically generated by md_pattern_like()
    figsize : tuple, optional
        Figure size in inches (width, height). Default is (8, 5)
    title : str, optional
        Title for the plot. Default is "Missing Data Pattern"
        
    Returns:
    --------
    None
        Displays the plot
    """
    data_only = pattern_df.iloc[:-1, :-1]
    row_counts = pattern_df.index[:-1]
    row_miss = pattern_df.iloc[:-1, -1]
    col_miss = pattern_df.loc["#miss_col"].iloc[:-1]

    cmap = ListedColormap([
        (101/255, 155/255, 213/255),  # blue for present
        (205/255, 100/255, 140/255)   # pink for missing
    ])

    plt.figure(figsize=figsize)
    ax = sns.heatmap(1 - data_only.astype(int), cmap=cmap, cbar=False,
                     linewidths=0.5, linecolor='black', square=True)

    for i, count in enumerate(row_counts):
        ax.text(-1.0, i + 0.5, f"{count}", va='center', ha='right', fontsize=10)

    for i, miss in enumerate(row_miss):
        ax.text(data_only.shape[1] + 0.1, i + 0.5, f"{int(miss)}", va='center', ha='left', fontsize=10)

    for j, miss in enumerate(col_miss):
        ax.text(j + 0.5, data_only.shape[0] + 1.6, f"{int(miss)}", ha='center', va='bottom', fontsize=10)

    ax.set_xticks([i + 0.5 for i in range(data_only.shape[1])])
    ax.set_xticklabels(data_only.columns, rotation=0)
    ax.set_yticks([i + 0.5 for i in range(data_only.shape[0])])
    ax.set_yticklabels([''] * len(row_counts))

    plt.subplots_adjust(bottom=0.2)
    plt.ylabel("Missing Pattern Count")
    plt.title(title)

    plt.tight_layout(pad=0.4)
    plt.show()
